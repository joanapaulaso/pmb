<!-- register.blade.php -->
@extends('layouts.guest')

@section('content')
    <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div class="max-w-md w-full p-8 bg-white rounded-lg shadow-md">
            <h2 class="text-center text-2xl font-bold text-[#267e90] mb-6">Criar uma Conta</h2>

            @if (session('message'))
                <div class="p-4 mb-4 bg-green-100 text-green-700 rounded-lg">
                    {{ session('message') }}
                </div>
            @endif

            <form method="POST" action="{{ route('register') }}" class="space-y-6">
                @csrf

                <div>
                    <label class="block text-sm font-medium text-gray-700">Nome Completo</label>
                    <input type="text" name="full_name" required class="w-full px-4 py-2 border rounded-md">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Email</label>
                    <input type="email" name="email" required class="w-full px-4 py-2 border rounded-md">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Senha</label>
                    <input type="password" name="password" required class="w-full px-4 py-2 border rounded-md">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Confirmar Senha</label>
                    <input type="password" name="password_confirmation" required class="w-full px-4 py-2 border rounded-md">
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700">Data de Nascimento</label>
                    <input type="date" name="birth_date" required class="w-full px-4 py-2 border rounded-md">
                </div>

                <!-- Checkbox para indicar se o usuário é de fora do Brasil -->
                <div class="mb-4">
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="isInternational" name="isInternational" class="form-checkbox">
                        <span class="ml-2 text-sm">Não sou do Brasil</span>
                    </label>
                </div>

                <!-- Campos para brasileiros -->
                <div id="brazilianFields">
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700">Estado</label>
                        @livewire('searchable-dropdown', [
                            'name' => 'state_id',
                            'url' => '/get-states',
                            'placeholder' => 'Digite para buscar um estado...',
                        ])
                    </div>

                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700">Município</label>
                        @livewire('searchable-dropdown', [
                            'name' => 'municipality_id',
                            'url' => '/get-municipalities',
                            'placeholder' => 'Digite para buscar um município...',
                            'dependsOn' => 'state_id',
                        ])
                    </div>

                    <input type="hidden" name="country_code" value="BR"> <!-- Define Brasil automaticamente -->
                </div>

                <!-- Campos para estrangeiros -->
                <div id="internationalFields" class="hidden">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">País</label>
                        <select name="country_code" id="country" class="w-full px-4 py-2 border rounded-md"></select>
                    </div>
                </div>

                <!-- Campos de Instituição -->
                <div id="institutionFields" class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Instituição</label>
                    @livewire('searchable-dropdown', [
                        'name' => 'institution_id',
                        'url' => '/get-institutions',
                        'placeholder' => 'Digite para buscar uma instituição...',
                        'dependsOn' => 'state_id',
                    ])
                </div>

                <!-- Checkbox para adicionar nova instituição -->
                <div class="mb-4">
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="newInstitutionCheckbox" class="form-checkbox">
                        <span class="ml-2 text-sm">Minha instituição não está na lista</span>
                    </label>
                </div>

                <!-- Campo para nova instituição -->
                <div id="newInstitutionField" class="hidden">
                    <label class="block text-sm font-medium text-gray-700">Nova Instituição</label>
                    <input type="text" name="new_institution" class="w-full px-4 py-2 border rounded-md">
                </div>

                <!-- Campos de Laboratório -->
                <div id="laboratoryFields" class="mb-4">
                    <label class="block text-sm font-medium text-gray-700">Laboratório</label>
                    @livewire('searchable-dropdown', [
                        'name' => 'laboratory_id',
                        'url' => '/get-laboratories',
                        'placeholder' => 'Digite para buscar um laboratório...',
                        'dependsOn' => 'institution_id',
                    ])
                </div>

                <!-- Checkbox para adicionar novo laboratório -->
                <div class="mb-4">
                    <label class="inline-flex items-center">
                        <input type="checkbox" id="newLaboratoryCheckbox" class="form-checkbox">
                        <span class="ml-2 text-sm">Meu laboratório não está na lista</span>
                    </label>
                </div>

                <!-- Campo para novo laboratório -->
                <div id="newLaboratoryField" class="hidden">
                    <label class="block text-sm font-medium text-gray-700">Novo Laboratório</label>
                    <input type="text" name="new_laboratory" class="w-full px-4 py-2 border rounded-md">
                </div>

                <div>
                    <label class="inline-flex items-center">
                        <input type="checkbox" name="lab_coordinator" class="form-checkbox">
                        <span class="ml-2">Coordenador de Laboratório?</span>
                    </label>
                </div>

                <div>
                    <button type="submit" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md shadow">
                        Registrar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const isInternationalCheckbox = document.getElementById("isInternational");
            const brazilianFields = document.getElementById("brazilianFields");
            const internationalFields = document.getElementById("internationalFields");
            const countrySelect = document.getElementById("country");
            const stateSelect = document.getElementById("state_id");
            const municipalitySelect = document.getElementById("municipality_id");
            const institutionSelect = document.getElementById("institution_id");
            const newInstitutionCheckbox = document.getElementById("newInstitutionCheckbox");
            const newInstitutionField = document.getElementById("newInstitutionField");
            const institutionFields = document.getElementById("institutionFields");
            const newLaboratoryCheckbox = document.getElementById("newLaboratoryCheckbox");
            const newLaboratoryField = document.getElementById("newLaboratoryField");
            const laboratoryFields = document.getElementById("laboratoryFields");
            isInternationalCheckbox.addEventListener("change", function() {
                if (this.checked) {
                    brazilianFields.classList.add("hidden");
                    internationalFields.classList.remove("hidden");
                    countrySelect.required = true;
                    if (stateSelect) stateSelect.required = false;
                    if (municipalitySelect) municipalitySelect.required = false;
                } else {
                    brazilianFields.classList.remove("hidden");
                    internationalFields.classList.add("hidden");
                    countrySelect.value = "BR";
                    if (stateSelect) stateSelect.required = true;
                    if (municipalitySelect) municipalitySelect.required = true;
                    loadStates();
                }
            });
            newInstitutionCheckbox.addEventListener("change", function() {
                if (this.checked) {
                    newInstitutionField.classList.remove("hidden");
                    institutionFields.classList.add("hidden");
                } else {
                    newInstitutionField.classList.add("hidden");
                    institutionFields.classList.remove("hidden");
                }
            });
            newLaboratoryCheckbox.addEventListener("change", function() {
                if (this.checked) {
                    newLaboratoryField.classList.remove("hidden");
                    laboratoryFields.classList.add("hidden");
                } else {
                    newLaboratoryField.classList.add("hidden");
                    laboratoryFields.classList.remove("hidden");
                }
            });
            fetch('/get-countries').then(response => response.json()).then(data => {
                countrySelect.innerHTML = '<option value="">Selecione um país</option>';
                data.forEach(country => {
                    let option = document.createElement('option');
                    option.value = country.code;
                    option.textContent = country.name;
                    countrySelect.appendChild(option);
                });
            });

            function loadStates() {
                if (!stateSelect) return;
                fetch('/get-states').then(response => response.json()).then(data => {
                    stateSelect.innerHTML = '<option value="">Selecione um estado</option>';
                    data.forEach(state => {
                        let option = document.createElement('option');
                        option.value = state.id;
                        option.textContent = state.name;
                        stateSelect.appendChild(option);
                    });
                }).catch(error => console.error("Erro ao carregar estados:", error));
            }
            if (stateSelect) {
                stateSelect.addEventListener('change', function() {
                    let stateId = this.value;
                    if (stateId && municipalitySelect) {
                        fetch(`/get-municipalities/${stateId}`).then(response => response.json()).then(
                            data => {
                                municipalitySelect.innerHTML =
                                    '<option value="">Selecione um município</option>';
                                data.forEach(municipality => {
                                    let option = document.createElement('option');
                                    option.value = municipality.id;
                                    option.textContent = municipality.name;
                                    municipalitySelect.appendChild(option);
                                });
                            }).catch(error => console.error("Erro ao carregar municípios:", error));
                        if (institutionSelect) {
                            fetch(`/get-institutions/${stateId}`).then(response => response.json()).then(
                                data => {
                                    institutionSelect.innerHTML =
                                        '<option value="">Selecione uma instituição</option>';
                                    data.forEach(institution => {
                                        let option = document.createElement('option');
                                        option.value = institution.id;
                                        option.textContent = institution.name;
                                        institutionSelect.appendChild(option);
                                    });
                                }).catch(error => console.error("Erro ao carregar instituições:",
                                error));
                        }
                    }
                });
            }
            if (!isInternationalCheckbox.checked) {
                loadStates();
            }
        });
    </script>
@endsection















<!-- searchable-dropdown.blade.php -->
<div class="relative">
    <input type="text" wire:model="search" placeholder="{{ $placeholder }}" class="w-full px-4 py-2 border rounded-md" />

    @if (!empty($options))
        <ul class="absolute bg-white border rounded-md w-full mt-1 max-h-48 overflow-auto">
            @foreach ($options as $option)
                <li wire:click="selectOption('{{ $option['id'] }}')" class="p-2 cursor-pointer hover:bg-gray-200">
                    {{ $option['name'] }}
                </li>
            @endforeach
        </ul>
    @endif

    <input type="hidden" name="{{ $name }}" value="{{ $selected }}">
</div>






<!-- SearchableDropdown.php -->
<?php

namespace App\Livewire;

use Livewire\Component;
use Illuminate\Support\Facades\Http;

class SearchableDropdown extends Component
{
    public $name;
    public $url;
    public $placeholder;
    public $dependsOn;
    public $selected;
    public $search = '';
    public $options = [];

    public function updatedSearch()
    {
        if (strlen($this->search) > 1) {
            $response = Http::get($this->url, ['query' => $this->search]);
            $this->options = $response->json();
        } else {
            $this->options = [];
        }
    }

    public function selectOption($value)
    {
        $this->selected = $value;
        $this->search = collect($this->options)->firstWhere('id', $value)['name'] ?? '';
        $this->options = [];
        $this->dispatchBrowserEvent('selected-option', ['name' => $this->name, 'value' => $value]);
    }

    public function render()
    {
        return view('livewire.searchable-dropdown');
    }
}



<!-- guest.blade.php -->
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-token" content="{{ csrf_token() }}">

    <title>{{ config('app.name', 'Laravel') }}</title>

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

    <!-- Scripts -->
    @vite(['resources/css/app.css', 'resources/js/app.js'])

    <!-- Livewire Styles -->
    @livewireStyles
</head>

<body class="bg-gray-100">
    <div class="container mx-auto p-4">
        @yield('content')
    </div>

    <!-- Livewire Scripts -->
    @livewireScripts
</body>

</html>



